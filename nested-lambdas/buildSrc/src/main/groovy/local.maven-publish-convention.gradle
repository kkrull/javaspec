//Conventions for Java projects that publish Maven artifacts
plugins {
	id 'maven-publish'
	id 'signing'
}

import info.javaspec.MavenPublishConventionExtension
def extension = project.extensions.create('mavenPublishConvention', MavenPublishConventionExtension)

/* Publication */

//https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
	publications {
		maven(MavenPublication) {
			afterEvaluate {
				from extension.publicationFrom.get()
			}

			//Publishing to Maven Central via Sonatype OSSRH requires extra POM info
			//https://central.sonatype.org/publish/requirements/
			pom {
				afterEvaluate {
					description = extension.publicationDescription.get()
					name = extension.publicationName.get()
				}

				developers {
					developer {
						id = 'kkrull'
						email = 'kdkrull@gmail.com'
						name = 'Kyle Krull'
						organizationUrl = 'https://github.com/kkrull'
					}
				}

				issueManagement {
					system = 'GitHub'
					url = 'https://github.com/kkrull/javaspec/issues'
				}

				licenses {
					license {
						name = 'MIT license'
						url = 'https://spdx.org/licenses/MIT'
					}
				}

				scm {
					connection = 'scm:git:git://github.com/kkrull/javaspec.git'
					developerConnection = 'scm:git:ssh://github.com:kkrull/javaspec.git'
					url = 'https://github.com/kkrull/javaspec'
				}

				url = 'https://javaspec.info'
			}
		}
	}

	repositories {
		maven {
			//Publishing opens a staging repository in Sonatype Nexus:
			// https://oss.sonatype.org/#stagingRepositories
			//Closing and releasing the staging repository allows it to go here:
			// https://central.sonatype.com/artifact/info.javaspec/greeter/0.0.1/versions
			name 'OSSRH'

			// url = 'https://oss.sonatype.org/content/repositories/snapshots'
      url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

			credentials {
				afterEvaluate {
					username = System.getenv('MAVEN_USERNAME')
					password = System.getenv('MAVEN_PASSWORD')
				}
			}
		}
	}
}

/* Signing */

//Artifacts published to Maven Central via Sonatype OSSRH have to be signed
//https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
signing {
	def signingKey = System.getenv('GPG_PRIVATE_KEY')
	def signingPassphrase = System.getenv('GPG_SIGNING_PASSPHRASE')

	//In-memory keys have to be ASCII-armored: https://stackoverflow.com/a/58000485/112682
	//Public keys need to be distributed: https://www.gnupg.org/gph/en/manual/x457.html
	useInMemoryPgpKeys(signingKey, signingPassphrase)
	sign publishing.publications['maven']
}
