plugins {
	id 'java-library'
	id 'local.jar-convention'
	id 'local.java-format-convention'
	id 'local.java-junit-convention'
	id 'local.license-convention'
	id 'local.maven-publish-convention'
}

description 'Service Provider: A TestEngine that runs specs on JUnit Jupiter'
version '2.0.0' //Has to go above other tasks that refer to it

sourceSets {
	//Add a sourceset for the sake of declaring a dependency on JUnit Console
	console { }
}

dependencies {
	consoleImplementation 'org.junit.platform:junit-platform-console-standalone:1.8.1'

	implementation project(':javaspec-api')
	implementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

	testImplementation 'org.assertj:assertj-core:3.22.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
	testImplementation 'org.junit.platform:junit-platform-testkit:1.8.2'
//  testRuntimeOnly project(':javaspec-engine-discovery-request-listener')
}

jarConvention.licenseFile = rootProject.file('../LICENSE')

javaFormatConvention.eclipseConfigFile = rootProject.file('etc/eclipse-format.xml')

licenseConvention.licenseFile = rootProject.file('../LICENSE')

mavenPublishConvention {
	publicationDescription = project.description
	publicationFrom = components.java
	publicationName = 'JavaSpec Engine'
}

task testEngineWithJUnitConsole(type: JavaExec) {
	dependsOn ':javaspec-api:assemble'
	dependsOn assemble
	dependsOn compileTestJava
	description 'Use javaspec-engine to run its own specs in an external JUnit Console process'

	def engineWithServiceDescriptor = jar.archivePath
	def testSources = project.sourceSets.test.output.asPath
	def testSourcesDependencies = configurations.testRuntimeClasspath.asPath

	classpath = files(project.sourceSets.console.compileClasspath)
	args = [
		'--classpath=' + engineWithServiceDescriptor,
		'--classpath=' + testSources,
		'--classpath=' + testSourcesDependencies,
		'--include-engine=' + 'javaspec-engine',
		'--select-class=' + 'info.javaspec.engine.JavaSpecEngineTest'
	]
}
