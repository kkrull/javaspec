require 'cucumber'
require 'cucumber/rake/task'
require 'rubygems/package'

desc 'Compile, run all tests, and run checkstyle'
task default: %w[java:test java:install cucumber java:checkstyle]


desc 'Clean everything'
task :clean => 'java:clean'


Cucumber::Rake::Task.new do |task|
  task.cucumber_opts = %w[
    --quiet
    --strict
    --tags 'not @wip'
  ]
end

namespace :cucumber do
  desc 'Run Cucumber scenarios tagged with @focus'
  task :focus do
    sh *%w[cucumber -t @focus]
  end
end


namespace :distribution do
  desc 'Force build, package, and install'
  task 'force-install' => %w[java:compile java:install distribution:install]

  desc 'Install the distribution to /usr/local'
  task :install do
    File.open distribution_path do |file|
      untar file, target_dir
    end

    ln_s "#{installed_dir}/bin/javaspec", installed_link unless File.exist? installed_link
  end

  desc 'Run the distribution on a known spec class'
  task :run do
    sh *%W[
        javaspec
        run
        --reporter=plaintext
        --spec-classpath=#{spec_classpath}
        info.javaspec.example.rb.SpringOperatedBoxingGloveSpecs
      ]
  end

  desc 'Remove the distribution from /usr/local'
  task :uninstall do
    rm installed_link if File.exist? installed_link
    raise IOError.new "Expected #{installed_dir} to be removed.  Run with rvmsudo?" if File.exist? installed_link

    rm_rf installed_dir, secure: true, verbose: true
    raise IOError.new "Expected #{installed_dir} to be removed.  Run with rvmsudo?" if File.exist? installed_dir
  end

  def distribution_path
    'console-runner/build/distributions/javaspec-2.0.0-SNAPSHOT.tar'
  end

  def spec_classpath
    'examples/build/classes/java/main'
  end

  def untar(file, target_dir)
    Gem::Package::TarReader.new file do |tar|
      tar.each do |entry|
        target_path = File.join target_dir, entry.full_name
        extract_tar_entry! entry, target_path, entry.header.mode
      end
    end
  end

  def extract_tar_entry!(tar_entry, target_path, mode)
    case
    when tar_entry.directory?
      mkdir_p target_path, mode: mode
    when tar_entry.file?
      extract_tar_file! tar_entry, target_path, mode
    else
      raise IOError.new "Unknown type of tar file entry: #{tar_entry}"
    end
  end

  def extract_tar_file!(tar_entry, target_path, mode)
    target_parent_directory = File.dirname target_path
    mkdir_p target_parent_directory unless File.directory? target_parent_directory
    File.open(target_path, 'wb', mode) do |target_file|
      target_file.write tar_entry.read
    end
  end

  def installed_dir
    File.join target_dir, 'javaspec-2.0.0-SNAPSHOT'
  end

  def installed_link
    '/usr/local/bin/javaspec'
  end

  def target_dir
    '/usr/local/opt'
  end
end


namespace :java do
  desc 'Perform static analysis on Java code'
  task :checkstyle do
    gradle %w[--stacktrace check]
  end

  desc 'Remove everything generated and compiled from Java code'
  task :clean do
    gradle %w[--stacktrace clean]
  end

  desc 'Compile Java sources'
  task :compile do
    gradle %w[--stacktrace build -x test]
  end

  desc 'Open cucumber-jvm report'
  task 'cucumber-report' do
    sh *%w[open console-runner-features/build/reports/cucumber/index.html]
  end

  desc 'Package and install java distributions, locally'
  task :install do
    #Cucumber options: https://github.com/cucumber/cucumber-java-skeleton#overriding-options
    gradle %w[--stacktrace installDist]
  end

  desc 'Run all tests on Java code'
  task :test do
    #Cucumber options: https://github.com/cucumber/cucumber-java-skeleton#overriding-options
    gradle %w[--stacktrace build]
  end

  def gradle(tasks)
    gradle_command =
      # https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
      if ENV['CI']
        %w[./gradlew --console=plain]
      else
        %w[./gradlew]
      end

    sh *gradle_command + tasks
  end
end


namespace :jetbrains do
  desc 'Remove all project files from Jetbrains IDEs'
  task :reset do
    sh *%w[rm -Rf .idea]
    sh "find . -iname '*.iml' -print -exec rm -Rf {} +"
  end
end


namespace :travis do
  desc 'Run the linter on the Travis configuration'
  task :lint do
    sh *%w[travis lint]
  end
end
